#+TITLE: Project reflections
#+AUTHOR: Sam T.
#+OPTIONS: toc:3 num:nil
#+EXPORT_FILE_NAME: reflections.md
#+LANGUAGE: en

* Goals

* Reflections
- Abstractly, this project was about ingesting data from various
  sources and combining the data in a structured way that made it easy
  to process.
- Doing things with dictionaries is good for a first pass but having a
  type or data structure with some explicit attributes definitely
  makes the code more readable.
- When its your own project, you can make it as messy as you want.
- I found I have a tendency to avoid wanting to write my own types,
  but in this case it was fine. Using a well-documented and understood
  type from the stdlib or another common package has the advantage
  that other programmers will trust and understand your code when they
  frist read it. However, I don't think it's too much to ask someone
  to just read a simple record data structure like the two I used for
  this project.
- For one -> many mappings, collections.defaultdict(list) is a great option.
- The plus of using NamedTuple, SimpleNamespace, or @dataclass is that
  you get a free ~__repr__` and also other programmers recognize the pattern.
- I decided to write my own little classes because I wanted to enforce
  the use of the constructor. Sort of in the philosophy of "make
  illegal program states unrepresentable"
- Being able to print out the data structures in a human-readable
  format for debugging is extremely useful.
- Worry about correctness and intelligibility before performance. I
  probably wasted way too much time thinking about little
  optimizations that didn't matter.
- Writing out code by hand is good. It's kind of like rubber-duck coding.

* Further reading
- Found [[https://www.youtube.com/watch?v=3MNVP9-hglc][this]] video about alternatives to object inheritance.
- Some documents from that video's comments:
  - [[https://prl.ccs.neu.edu/img/p-tr-1971.pdf]]
  - [[https://www.cs.tufts.edu/~nr/cs257/archive/barbara-liskov/data-abstraction-and-hierarchy.pdf]]

* Future ideas
- Rewrite this in Haskell with types.
- Add ~genanki~ functionality.
  
** A better interface?


*** The idea
- What would be cook is some kind of GUI.
- You would
  1. Manually create your vocab list.
  2. For each term in your vocab list:
  3. GUI does a Tatoeba search. Search can be paramatarized.
  4. GUI displays the current term and the search results.
  5. You can browse through the search results.
  6. GUI gives you the option to modify the search, either its
     parameters or filters.
  7. Sentences and translations are displayed like they are in the
     Tatoeba web app.
  8. When you find a sentence you like, you mark it. You can mark multiple.
  9. The app stores your choice.
  10. The next term in your list is shown.
  11. At the end, you get a ~.tsv~ that can be imported as Anki flaschards.
  12. Could also generate an anki deck.
- The app would be smart enough to figure out what is a phrase, a
  seperable verb, the plural and singular forms of a noun.
*** Is there a way to do this with just text?
- Like a CLI or a jupyter notebook.
- Need the GUI bc it makes looking at the sentences and quickly refining the search painless.
- But maybe this could be done with an interactive CLI prompt? Something like a REPL
- The issue is IDK how to make a GUI.
- Also need the manticore search abilities.
*** A proof of concept
- Could do this without the Manticore search although investing the
  time to learn how to do that could be worth it.
- User writes tables that look like
  
| Term                  | Type |                  |
|-----------------------+------+------------------|
| der Apfel, die Äpfel  | n    | A noun           |
| der Abend, die Abende | n    |                  |
| aufstehen             | vs   | A seperable verb |
| Das tut mir leid.     | p    | A phrase         |

- Interactive CLI reads table. For each term:
  1. Shows you the term
  2. Shows you a few sentences.
  3. You mark what sentences you want via keyboard input.
- Interactive CLI shows you the current search term.
- Allows you to add filters.
- Can have some pre-defined other searches to cycle through.
- Could use Textual or pytermgui
- Could also just make a repl

*** Resources
- [[https://manual.manticoresearch.com/Creating_a_table/NLP_and_tokenization/Morphology?client=Python#morphology][Manticore morphology searches]]
- [[https://pymotw.com/2/cmd/][python cmd library]]
- [[https://www.reddit.com/r/learnpython/comments/3yp89v/make_a_repl_for_a_python_program/][this reddit post]]
- [[https://www.youtube.com/watch?v=NI9LXzo0UY0][YouTube on using tkinter]]
- [[https://dev.mysql.com/doc/mysql-tutorial-excerpt/8.0/en/][MySQL tutorial]]
- [[https://www.w3schools.com/MySQL/][W3Schools MySQL]]
- [[https://en.wiki.tatoeba.org/articles/show/using-the-tatoeba-corpus][How to use the tatoeba corpus]]
- [[https://github.com/manticoresoftware/manticoresearch-python][Manticore python client]]
- Ask ChatGPT
- Maybe get a MySQL client to filter stuff first.
- Try searching "tatoeba CLI browser"

*** Some warnings
- I'm definitely spending more time on this than I am on actually
  studying German.
- Someone may have already implemented this. Maybe do some Googling first.
- I could sink hours into this. Time myself. Or set the time aside and
  be intentional.
